// Code generated by go-enum
// DO NOT EDIT!

package launchpad

import (
	"fmt"
)

const (
	// RowPressed is a HandlerType of type RowPressed
	RowPressed HandlerType = iota
	// RowReleased is a HandlerType of type RowReleased
	RowReleased
	// PadPressed is a HandlerType of type PadPressed
	PadPressed
	// PadReleased is a HandlerType of type PadReleased
	PadReleased
	// PagePressed is a HandlerType of type PagePressed
	PagePressed
	// PageReleased is a HandlerType of type PageReleased
	PageReleased
	// ArrowPressed is a HandlerType of type ArrowPressed
	ArrowPressed
	// ArrowReleased is a HandlerType of type ArrowReleased
	ArrowReleased
)

const _HandlerTypeName = "RowPressedRowReleasedPadPressedPadReleasedPagePressedPageReleasedArrowPressedArrowReleased"

var _HandlerTypeMap = map[HandlerType]string{
	0: _HandlerTypeName[0:10],
	1: _HandlerTypeName[10:21],
	2: _HandlerTypeName[21:31],
	3: _HandlerTypeName[31:42],
	4: _HandlerTypeName[42:53],
	5: _HandlerTypeName[53:65],
	6: _HandlerTypeName[65:77],
	7: _HandlerTypeName[77:90],
}

func (i HandlerType) String() string {
	if str, ok := _HandlerTypeMap[i]; ok {
		return str
	}
	return fmt.Sprintf("HandlerType(%d)", i)
}

var _HandlerTypeValue = map[string]HandlerType{
	_HandlerTypeName[0:10]:  0,
	_HandlerTypeName[10:21]: 1,
	_HandlerTypeName[21:31]: 2,
	_HandlerTypeName[31:42]: 3,
	_HandlerTypeName[42:53]: 4,
	_HandlerTypeName[53:65]: 5,
	_HandlerTypeName[65:77]: 6,
	_HandlerTypeName[77:90]: 7,
}

// ParseHandlerType attempts to convert a string to a HandlerType
func ParseHandlerType(name string) (HandlerType, error) {
	if x, ok := _HandlerTypeValue[name]; ok {
		return HandlerType(x), nil
	}
	return HandlerType(0), fmt.Errorf("%s is not a valid HandlerType", name)
}
