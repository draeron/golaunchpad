// Code generated by go-enum
// DO NOT EDIT!

package launchpad

import (
	"fmt"
)

const (
	// MaskPad is a MaskPreset of type MaskPad
	MaskPad MaskPreset = iota
	// MaskArrows is a MaskPreset of type MaskArrows
	MaskArrows
	// MaskRows is a MaskPreset of type MaskRows
	MaskRows
	// MaskModes is a MaskPreset of type MaskModes
	MaskModes
	// MaskTop is a MaskPreset of type MaskTop
	MaskTop
	// MaskAll is a MaskPreset of type MaskAll
	MaskAll
)

const _MaskPresetName = "MaskPadMaskArrowsMaskRowsMaskModesMaskTopMaskAll"

var _MaskPresetMap = map[MaskPreset]string{
	0: _MaskPresetName[0:7],
	1: _MaskPresetName[7:17],
	2: _MaskPresetName[17:25],
	3: _MaskPresetName[25:34],
	4: _MaskPresetName[34:41],
	5: _MaskPresetName[41:48],
}

func (i MaskPreset) String() string {
	if str, ok := _MaskPresetMap[i]; ok {
		return str
	}
	return fmt.Sprintf("MaskPreset(%d)", i)
}

var _MaskPresetValue = map[string]MaskPreset{
	_MaskPresetName[0:7]:   0,
	_MaskPresetName[7:17]:  1,
	_MaskPresetName[17:25]: 2,
	_MaskPresetName[25:34]: 3,
	_MaskPresetName[34:41]: 4,
	_MaskPresetName[41:48]: 5,
}

// ParseMaskPreset attempts to convert a string to a MaskPreset
func ParseMaskPreset(name string) (MaskPreset, error) {
	if x, ok := _MaskPresetValue[name]; ok {
		return MaskPreset(x), nil
	}
	return MaskPreset(0), fmt.Errorf("%s is not a valid MaskPreset", name)
}
