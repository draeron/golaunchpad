// Code generated by go-enum
// DO NOT EDIT!

package minimk3

import (
	"fmt"
)

const (
	// CmdDeviceInquiry is a Cmd of type DeviceInquiry
	CmdDeviceInquiry Cmd = iota
	// CmdEnableSession is a Cmd of type EnableSession
	CmdEnableSession
	// CmdProgrammerMode is a Cmd of type ProgrammerMode
	CmdProgrammerMode
	// CmdSelectLayout is a Cmd of type SelectLayout
	CmdSelectLayout
	// CmdBrightnessLevel is a Cmd of type BrightnessLevel
	CmdBrightnessLevel
	// CmdClearDawState is a Cmd of type ClearDawState
	CmdClearDawState
	// CmdSessionColor is a Cmd of type SessionColor
	CmdSessionColor
	// CmdTextScrolling is a Cmd of type TextScrolling
	CmdTextScrolling
	// CmdLedColor is a Cmd of type LedColor
	CmdLedColor
	// CmdSleep is a Cmd of type Sleep
	CmdSleep
)

const _CmdName = "DeviceInquiryEnableSessionProgrammerModeSelectLayoutBrightnessLevelClearDawStateSessionColorTextScrollingLedColorSleep"

var _CmdMap = map[Cmd]string{
	0: _CmdName[0:13],
	1: _CmdName[13:26],
	2: _CmdName[26:40],
	3: _CmdName[40:52],
	4: _CmdName[52:67],
	5: _CmdName[67:80],
	6: _CmdName[80:92],
	7: _CmdName[92:105],
	8: _CmdName[105:113],
	9: _CmdName[113:118],
}

func (i Cmd) String() string {
	if str, ok := _CmdMap[i]; ok {
		return str
	}
	return fmt.Sprintf("Cmd(%d)", i)
}

var _CmdValue = map[string]Cmd{
	_CmdName[0:13]:    0,
	_CmdName[13:26]:   1,
	_CmdName[26:40]:   2,
	_CmdName[40:52]:   3,
	_CmdName[52:67]:   4,
	_CmdName[67:80]:   5,
	_CmdName[80:92]:   6,
	_CmdName[92:105]:  7,
	_CmdName[105:113]: 8,
	_CmdName[113:118]: 9,
}

// ParseCmd attempts to convert a string to a Cmd
func ParseCmd(name string) (Cmd, error) {
	if x, ok := _CmdValue[name]; ok {
		return Cmd(x), nil
	}
	return Cmd(0), fmt.Errorf("%s is not a valid Cmd", name)
}
